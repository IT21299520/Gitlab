.side-filters.hidden-xs.hidden-sm
  = form_tag filter_path(entity), method: 'get' do
    - if current_user
      %fieldset.scope-filter
        %ul.nav.nav-pills.nav-stacked
          %li{class: ("active" if params[:scope] == 'assigned-to-me')}
            = link_to filter_path(entity, scope: 'assigned-to-me') do
              = t("gitlab.filter.assigned_to_me")
          %li{class: ("active" if params[:scope] == 'authored')}
            = link_to filter_path(entity, scope: 'authored') do
              = t("gitlab.filter.created_by_me")
          %li{class: ("active" if params[:scope] == 'all')}
            = link_to filter_path(entity, scope: 'all') do
              = t("gitlab.filter.everyones")

    %fieldset.status-filter
      %legend #{t("gitlab.filter.state")}
      %ul.nav.nav-pills
        %li{class: ("active" if params[:state] == 'opened')}
          = link_to filter_path(entity, state: 'opened') do
            = t("gitlab.filter.open")
        %li{class: ("active" if params[:state] == 'closed')}
          = link_to filter_path(entity, state: 'closed') do
            = t("gitlab.filter.closed")
        %li{class: ("active" if params[:state] == 'all')}
          = link_to filter_path(entity, state: 'all') do
            = t("gitlab.filter.all")

    %fieldset
      %legend #{t("gitlab.filter.projects")}
      %ul.nav.nav-pills.nav-stacked.nav-small
        - @projects.each do |project|
          - unless entities_per_project(project, entity).zero?
            %li{class: ("active" if params[:project_id] == project.id.to_s)}
              = link_to filter_path(entity, project_id: project.id) do
                = project.name_with_namespace
                %small.pull-right= entities_per_project(project, entity)

    %fieldset
      - if params[:state].present? || params[:project_id].present?
        = link_to filter_path(entity, state: nil, project_id: nil), class: 'pull-right cgray' do
          %i.icon-remove
          %strong #{t("gitlab.filter.clear_filter")}

